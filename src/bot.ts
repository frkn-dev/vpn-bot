import { Telegraf, TelegramError } from "telegraf";
import {
  awaitingMnemonic,
  siteHandler,
  statHandler,
  subClashHandler,
  subPlainHandler,
} from "./handlers";
import { handleSubscriptionClashCallback } from "./handlers/callback/clash";
import { handleSubscriptionCallback } from "./handlers/callback/sub";
import { deleteHandler } from "./handlers/delete";
import {
  feedbackHandler,
  handleFeedbackCallback,
  handleFeedbackMessage,
} from "./handlers/feedback";
import { scoreHandler } from "./handlers/score";
import { startHandler } from "./handlers/start";
import {
  ADMIN_CHAT_ID,
  API_AUTH_TOKEN,
  API_BASE_URL,
  BOT_TOKEN,
  GOOGLE_SCRIPT_URL,
  TOKEN,
} from "./shared/config";
import { connectWithMnemonic } from "./site";
import { BotState } from "./state";

export const bot = new Telegraf(BOT_TOKEN);
export const botState = new BotState(
  API_BASE_URL,
  API_AUTH_TOKEN,
  GOOGLE_SCRIPT_URL,
  TOKEN,
  ADMIN_CHAT_ID,
);

// Command handlers
bot.command("start", (ctx) => startHandler(ctx, botState));
bot.command("connect", (ctx) => subPlainHandler(ctx, botState));
bot.command("clash", (ctx) => subClashHandler(ctx, botState));
bot.command("stat", (ctx) => statHandler(ctx, botState));
bot.command("site", (ctx) => siteHandler(ctx, botState));
bot.command("delete", (ctx) => deleteHandler(ctx, botState));
bot.command("stop", (ctx) => deleteHandler(ctx, botState));
bot.command("status", (ctx) => scoreHandler(ctx, botState));
bot.command("feedback", (ctx) => feedbackHandler(ctx, botState));
bot.command("support", (ctx) => feedbackHandler(ctx, botState)); // Alias for feedback

// Menu
bot.telegram.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" },
  { command: "connect", description: "–ü–æ–ª—É—á–∏—Ç—å VPN —Å—Å—ã–ª–∫—É" },
  { command: "clash", description: "–ü–æ–ª—É—á–∏—Ç—å VPN Clash —Å—Å—ã–ª–∫—É" },
  { command: "stat", description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" },
  { command: "site", description: "–ï—Å–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ" },
]);

// Text message handler
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const message = ctx.message.text;

  // Handle feedback messages first
  const handledByFeedback = await handleFeedbackMessage(ctx, botState);
  if (handledByFeedback) {
    return;
  }

  // Handle site command
  if (awaitingMnemonic[userId]) {
    awaitingMnemonic[userId] = false; // reset

    const words = message.trim().split(/\s+/);
    if (words.length !== 12) {
      return ctx.reply(
        "–§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /site",
      );
    }

    try {
      const data = await connectWithMnemonic(message.trim());
      if (typeof data === "string") {
        await ctx.reply(data);
      } else {
        await ctx.reply(`–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${data.subscription_url}</code>`, {
          parse_mode: "HTML",
        });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ siteHandler:", err);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑—ã.");
    } finally {
      // biome-ignore lint/correctness/noUnsafeFinally: TODO
      return;
    }
  }

  // Handle unknown commands
  if (message.startsWith("/")) {
    await ctx.reply(
      "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü´£\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
        "‚Ä¢ /connect - –ü–æ–ª—É—á–∏—Ç—å VPN —Å—Å—ã–ª–∫—É\n" +
        "‚Ä¢ /clash - –ü–æ–ª—É—á–∏—Ç—å VPN Clash —Å—Å—ã–ª–∫—É\n" +
        "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n" +
        "‚Ä¢ /stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
        "‚Ä¢ /site - –ï—Å–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ\n" +
        "‚Ä¢ /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n" +
        "‚Ä¢ /delete - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
    );
  }
});

// Callback query handler
bot.on("callback_query", async (ctx) => {
  try {
    const callbackQuery = ctx.callbackQuery;

    // Answer callback query to remove loading state
    try {
      await ctx.answerCbQuery();
    } catch (err) {
      // Ignore common callback query errors
      if (
        err instanceof TelegramError &&
        !err?.description?.includes("query is too old") &&
        !err?.description?.includes("query ID is invalid")
      ) {
        console.error("[CALLBACK] answerCbQuery error:", err);
      }
    }

    if (!callbackQuery || !("data" in callbackQuery)) return;

    const data = callbackQuery.data;
    if (!data) return;

    console.log(`[CALLBACK] User ${ctx.from?.id} pressed: ${data}`);

    // Route callback data to appropriate handlers
    if (data.startsWith("feedback_")) {
      await handleFeedbackCallback(ctx, botState);
    } else if (data.startsWith("plain")) {
      await handleSubscriptionCallback(ctx, botState);
    } else if (data.startsWith("clash")) {
      await handleSubscriptionClashCallback(ctx, botState);
    } else {
      console.log(`[CALLBACK] Unknown callback data: ${data}`);
      await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
    }
  } catch (err) {
    console.error("[CALLBACK] Callback query error:", err);
    try {
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
    } catch (answerErr) {
      console.error("[CALLBACK] Failed to answer callback query:", answerErr);
    }
  }
});

// Global bot error handler
bot.catch(async (err, ctx) => {
  console.error(`[BOT ERROR] User ${ctx.from?.id}:`, err);
  try {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } catch (e) {
    console.error("Failed to send error message:", e);
  }
});
