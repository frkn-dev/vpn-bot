import type { Context } from "telegraf";
import type { BotState } from "../state";

export const scoreHandler = async (ctx: Context, botState: BotState) => {
  const user = ctx.from;
  if (!user) return ctx.reply("/start –¥–ª—è –Ω–∞—á–∞–ª–∞");

  const userEntry = await botState.findUserByTelegramId(user.id);
  if (!userEntry || userEntry.is_deleted) return ctx.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ /start");

  await ctx.reply("‚öôÔ∏è –°—á–∏—Ç–∞—é –º–µ—Ç—Ä–∏–∫–∏, –ø–æ–¥–æ–∂–¥–∏...");

  try {
    const env = botState.getEnv();
    const nodes = await botState.getNodes(env);
    if (!nodes || nodes.length === 0) {
      return ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏");
    }

    const scores = await Promise.all(
      nodes.map(async (node) => {
        const score = await botState.getNodeScore(node.uuid);

        return {
          hostname: node.hostname,
          env: node.env,
          label: node.label,
          score: score?.score ?? null,
          details: score?.details ?? null,
          max_band: node.max_bandwidth_bps,
          status: node.status,
        };
      }),
    );

    const header =
      "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ (—á–µ–º –Ω–∏–∂–µ –Ω–∞–≥—Ä—É–∑–∫–∞, —Ç–µ–º –ª—É—á—à–µ):\n" +
      "üü¢ ‚Äî –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n" +
      "üü° ‚Äî —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞\n" +
      "üî¥ ‚Äî –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n\n";

    const formatted = scores
      .sort((a, b) => {
        if (a.score === null) return 1;
        if (b.score === null) return -1;
        return b.score - a.score;
      })
      .map((s) => {
        if (s.status === "Offline") {
          return `üî¥ <b>Offline - ${s.label}</b> (${s.env})\n‚õî –ù–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
        }

        if (s.score) {
          const score = s.score;
          const emoji = score < 0.4 ? "üü¢" : score < 0.75 ? "üü°" : "üî¥";

          const bandwidthCurrentMbps = (
            (s.details?.bandwidth ?? 0) / 1_000_000
          ).toFixed(1);
          const bandwidthMaxMbps = (s.max_band / 1_000_000).toFixed(1);

          return `${emoji} <b>${s.status} - ${s.label}</b> (${s.env}) \n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${bandwidthCurrentMbps}/${bandwidthMaxMbps} Mbps \n–ù–∞–≥—Ä—É–∑–∫–∞: ${(score * 100).toFixed(1)} / 100%\n`;
        } else {
          return `üü° <b>Online - ${s.label}</b> (${s.env})\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n`;
        }
      })
      .join("\n");

    if (!formatted) {
      return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –Ω–æ–¥—ã");
    }

    return ctx.replyWithHTML(header + formatted);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ scoreHandler:", err);
    return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏");
  }
};
