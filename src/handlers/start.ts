import { Context } from "telegraf";
import { BotState } from "../state";
import { generateUsername } from "../utils";

export const startHandler = async (ctx: Context, botState: BotState) => {
  const user = ctx.from;

  if (!user || !ctx.chat) {
    return ctx.reply("/start –¥–ª—è –Ω–∞—á–∞–ª–∞");
  }

  const welcome_msg = [
    "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FRKN VPN\\!*",
    "",
    "üîê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π \\(–ø–æ–∫–∞ —á—Ç–æ\\) –∏ –±—ã—Å—Ç—Ä—ã–π VPN –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à –≤–ø–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\\, —ç—Ç–æ –∑–∞–∫–æ–Ω",
    "",
    "üì± *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:*",
    "‚Ä¢ *Android* \\- Hiddify",
    "‚Ä¢ *iPhone/iPad* \\- Streisand, Shadowrocket",
    "‚Ä¢ *Windows* \\- Hiddify, Clash Verge",
    "‚Ä¢ *MacOS* \\- Clash Verge, Streisand",
    "‚Ä¢ *Linux* \\- Clash Verge",
    "",
    "üí° [–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤](https://github.com/XTLS/Xray-core?tab=readme-ov-file#gui-clients)",
    "",
    "‚ö° *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*",
    "üîó /connect \\- –ü–æ–ª—É—á–∏—Ç—å VPN\\-–∫–ª—é—á",
    "üìà /status \\- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤/–Ω–∞–≥—Ä—É–∑–∫–∞",
    "üíé /sub \\- –ü–æ–¥–ø–∏—Å–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üÜò /support \\- –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "üí¨ /feedback \\- –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
  ].join("\n");

  const username = user.username ?? generateUsername();
  const result = await botState.registerUserReq(user.id, username);

  switch (result.type) {
    case "ok":
      await botState.addUser(result.id, {
        id: result.id,
        username: username,
        telegram_id: user.id,
        is_deleted: false,
      });

      await ctx.telegram.sendMessage(ctx.chat.id, welcome_msg, {
        parse_mode: "MarkdownV2",
        ...({ disable_web_page_preview: true } as any),
      });
      break;

    case "already_exists":
      const userEntry = botState.findUserByTelegramId(user.id);
      if (userEntry?.is_deleted) {
        const res = await botState.undeleteUserReq(userEntry.id);
        if (res.type === "ok") {
          await botState.undeleteUser(userEntry.id);
          await ctx.reply(welcome_msg + "\n\nWelcome back", {
            parse_mode: "MarkdownV2",
          });
        }
      } else {
        await ctx.telegram.sendMessage(ctx.chat.id, welcome_msg, {
          parse_mode: "MarkdownV2",
          ...({ disable_web_page_preview: true } as any),
        });
      }
      break;

    case "error":
      await ctx.reply("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      break;
  }
};
