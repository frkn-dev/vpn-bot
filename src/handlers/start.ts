import type { Context } from "telegraf";
import { generateUsername } from "../shared/generate";
import type { BotState } from "../state";

export const startHandler = async (ctx: Context, botState: BotState) => {
  const user = ctx.from;

  if (!user || !ctx.chat) {
    return ctx.reply("/start –¥–ª—è –Ω–∞—á–∞–ª–∞");
  }

  const welcome_msg = [
    "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FRKN VPN\\!*",
    "",
    "üîê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π \\(–ø–æ–∫–∞ —á—Ç–æ\\) –∏ –±—ã—Å—Ç—Ä—ã–π VPN –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à –≤–ø–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\\, —ç—Ç–æ –∑–∞–∫–æ–Ω",
    "",
    "üì± *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:*",
    "‚Ä¢ *Android* \\- Hiddify",
    "‚Ä¢ *iPhone/iPad* \\- Streisand, Shadowrocket",
    "‚Ä¢ *Windows* \\- Hiddify, Clash Verge",
    "‚Ä¢ *MacOS* \\- Clash Verge, Streisand",
    "‚Ä¢ *Linux* \\- Clash Verge",
    "",
    "üí° [–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤](https://github.com/XTLS/Xray-core?tab=readme-ov-file#gui-clients)",
    "",
    "‚ö° *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*",

    "üîó /connect         \‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ VPN",
    "üíé /clash              \ ‚Äî Clash —Å—Å—ã–ª–∫–∞",
    "üåê /site               \‚Äî –ï—Å–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ",
    "üíö /status             \‚Äî  C—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤",
    "üìä /stat                \ ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    "üíô /support          \‚Äî –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "‚ú® /feedback        \‚Äî –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
  ].join("\n");

  const username = user.username ?? generateUsername();
  const result = await botState.registerUser(user.id, username);

  switch (result.type) {
    // biome-ignore lint/suspicious/noFallthroughSwitchClause: TODO
    case "ok": {
      const userEntry = await botState.findUserByTelegramId(user.id);
      if (userEntry) {
        const conn = await botState.createConnection({
          env: botState.getEnv(),
          proto: "VlessXtls",
          user_id: userEntry.id,
        });

        if (conn) {
          console.log(
            `Created connection ${conn.response} for user ${userEntry.id}`,
          );
        }

        await ctx.telegram.sendMessage(ctx.chat.id, welcome_msg, {
          parse_mode: "MarkdownV2",
          ...({ disable_web_page_preview: true } as any),
        });
        break;
      }
    }

    case "already_exists": {
      const userEntry = await botState.findUserByTelegramId(user.id);
      if (userEntry?.is_deleted) {
        await botState.undeleteUser(userEntry.id);

        const conn = await botState.createConnection({
          env: botState.getEnv(),
          proto: "VlessXtls",
          user_id: userEntry.id,
        });

        if (conn) {
          console.log(
            `ReCreated connection ${conn.response} for user ${userEntry.id}`,
          );
        }
        const welcome_back_msg = welcome_msg + "\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!";

        await ctx.telegram.sendMessage(ctx.chat.id, welcome_back_msg, {
          parse_mode: "MarkdownV2",
          ...({ disable_web_page_preview: true } as any),
        });
      } else {
        await ctx.telegram.sendMessage(ctx.chat.id, welcome_msg, {
          parse_mode: "MarkdownV2",
          ...({ disable_web_page_preview: true } as any),
        });
      }
      break;
    }
    case "error":
      await ctx.reply("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      break;
  }
};
