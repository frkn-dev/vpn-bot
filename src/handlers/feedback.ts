// handlers/feedback.ts - Secure version for VPN service
import { Context } from "telegraf";
import { BotState } from "../state";

interface FeedbackData {
	token: string;
	username?: string;
	user_id: number;
	message: string;
	rating?: string;
	date: string;
}

// Rate limiting: user_id -> last message time
const userLastMessage = new Map<number, number>();
const userFeedbackState = new Map<
	number,
	{ rating?: string; awaitingMessage: boolean }
>();

export const feedbackHandler = async (ctx: Context, botState: BotState) => {
	const userId = ctx.from?.id;
	if (!userId) return;

	// Check rate limiting (5 minutes between feedback)
	const now = Date.now();
	const lastMessageTime = userLastMessage.get(userId) || 0;
	const fiveMinutes = 5 * 60 * 1000;

	if (now - lastMessageTime < fiveMinutes) {
		const remainingTime = Math.ceil(
			(fiveMinutes - (now - lastMessageTime)) / 60000,
		);
		await ctx.reply(
			`‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} –º–∏–Ω. –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞.`,
		);
		return;
	}

	const keyboard = {
		inline_keyboard: [
			[
				{ text: "‚≠ê", callback_data: "feedback_rate_1" },
				{ text: "‚≠ê‚≠ê", callback_data: "feedback_rate_2" },
				{ text: "‚≠ê‚≠ê‚≠ê", callback_data: "feedback_rate_3" },
			],
			[
				{ text: "‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: "feedback_rate_4" },
				{ text: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: "feedback_rate_5" },
			],
		],
	};

	await ctx.reply(
		"üìù –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º VPN —Å–µ—Ä–≤–∏—Å–µ!\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:",
		{ reply_markup: keyboard },
	);
};

export const handleFeedbackCallback = async (
	ctx: Context,
	botState: BotState,
) => {
	const callbackQuery = ctx.callbackQuery;
	if (!callbackQuery || !("data" in callbackQuery)) return;

	const data = callbackQuery.data;
	if (!data?.startsWith("feedback_rate_")) return;

	const rating = data.replace("feedback_rate_", "");
	const userId = ctx.from?.id;

	if (!userId) return;

	// Rating validation
	if (!["1", "2", "3", "4", "5"].includes(rating)) {
		await ctx.answerCbQuery("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞");
		return;
	}

	userFeedbackState.set(userId, { rating, awaitingMessage: true });

	const stars = "‚≠ê".repeat(parseInt(rating));
	await ctx.editMessageText(
		`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É ${stars}!\n\nüí¨ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ—Ç–∑—ã–≤. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:\n\n` +
			`  üì± –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (iPhone, Android, Windows –∏ —Ç.–¥.)\n` +
			`  üåç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ/–≥–æ—Ä–æ–¥/–ø—Ä–æ–≤–∞–π–¥–µ—Ä\n` +
			`  üì° –¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø—Ä–æ—Ç–æ–∫–æ–ª/–∫ –∫–∞–∫–æ–º—É —Å–µ—Ä–≤–µ—Ä—É/—Å—Ç—Ä–∞–Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ—Å—å)\n` +
			`\n ` +
			`  üîß –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –í–∞—à Id —Å —Å–∞–π—Ç–∞ frkn.org –≤ –≤–∏–¥–µ XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX#cluster_nameN\n` +
			`\n–°–ø–∞—Å–∏–±–æ\n–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:`,
	);
};

export const handleFeedbackMessage = async (
	ctx: Context,
	botState: BotState,
): Promise<boolean> => {
	const userId = ctx.from?.id;
	const message =
		ctx.message && "text" in ctx.message ? ctx.message.text : "";

	if (!userId || !message) return false;

	const userState = userFeedbackState.get(userId);
	if (!userState?.awaitingMessage) return false;

	// Message validation
	if (message.length > 1000) {
		await ctx.reply(
			"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
		);
		return true;
	}

	// Filter suspicious content
	const cleanMessage = message
		.replace(/<[^>]*>/g, "[HTML —É–¥–∞–ª–µ–Ω]") // Remove HTML
		.replace(/javascript:/gi, "[JS —É–¥–∞–ª–µ–Ω]") // Remove JS
		.replace(/script/gi, "[–°–ö–†–ò–ü–¢ —É–¥–∞–ª–µ–Ω]"); // Remove script

	// Simple spam check
	const spamWords = [
		"–∫–∞–∑–∏–Ω–æ",
		"–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å",
		"advertisement",
		"casino",
		"click here",
	];
	const isSpam = spamWords.some((word) =>
		cleanMessage.toLowerCase().includes(word),
	);

	if (isSpam) {
		await ctx.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.");
		userFeedbackState.delete(userId);
		return true;
	}

	const feedbackData: FeedbackData = {
		token: botState.getGoogleScriptToken(),
		username:
			ctx.from?.username ||
			`${ctx.from?.first_name} ${ctx.from?.last_name}`.trim(),
		user_id: userId,
		message: cleanMessage,
		rating: userState.rating,
		date: new Date().toISOString(),
	};

	try {
		const response = await fetch(botState.getGoogleScriptUrl(), {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(feedbackData),
			// Add timeout
			signal: AbortSignal.timeout(10000), // 10 seconds
		});

		const result = await response.json().catch(() => ({ status: "error" }));

		if (response.ok && result.status === "success") {
			await ctx.reply(
				"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–ª–∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.",
			);

			// Update last message time
			userLastMessage.set(userId, Date.now());

			// Send admin notification
			if (botState.getAdminChatId()) {
				const adminMessage =
					`üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ VPN!\n\n` +
					`üë§ –û—Ç: @${feedbackData.username} (ID: ${feedbackData.user_id})\n` +
					`‚≠ê –û—Ü–µ–Ω–∫–∞: ${feedbackData.rating}/5\n` +
					`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${feedbackData.message}`;

				try {
					await ctx.telegram.sendMessage(
						botState.getAdminChatId(),
						adminMessage,
					);
				} catch (adminError) {
					console.error(
						"Failed to send admin notification:",
						adminError,
					);
				}
			}
		} else if (result.message === "Rate limit exceeded") {
			await ctx.reply("‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		} else {
			throw new Error(`Server responded: ${result.message}`);
		}
	} catch (error) {
		console.error("Error sending feedback:", error);
		if (error instanceof Error && error.name === "TimeoutError") {
			await ctx.reply("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		} else {
			await ctx.reply(
				"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			);
		}
	}

	userFeedbackState.delete(userId);
	return true;
};
