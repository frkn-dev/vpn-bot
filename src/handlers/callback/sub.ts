import QRCode from "qrcode";
import type { Context } from "telegraf";
import type { BotState } from "../../state";

export async function handleSubscriptionCallback(
  ctx: Context,
  botState: BotState,
) {
  const callbackQuery = ctx.callbackQuery;

  if (!callbackQuery || !("data" in callbackQuery)) {
    return await ctx.answerCbQuery();
  }

  const data = callbackQuery.data;
  if (!data) {
    return await ctx.answerCbQuery();
  }

  const user = ctx.from;
  if (!user || !user.username) {
    return ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }

  const userEntry = await botState.findUserByTelegramId(user.id);
  if (!userEntry || userEntry.is_deleted) {
    return ctx.answerCbQuery("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
  }

  const subLink = botState.getSubLink(userEntry.id, "plain");

  const qrBuffer = await QRCode.toBuffer(subLink, {
    errorCorrectionLevel: "H",
    type: "png",
    margin: 8,
    scale: 6,
  });

  await ctx.editMessageText(
    `*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å* \n\`\`\`\n${subLink}\n\`\`\``,
    { parse_mode: "MarkdownV2" },
  );

  await ctx.replyWithPhoto(
    { source: qrBuffer },
    { caption: `QR-–∫–æ–¥ –¥–ª—è VPN –ø–æ–¥–ø–∏—Å–∫–∏ üß∑` },
  );
}
