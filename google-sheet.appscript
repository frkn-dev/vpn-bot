function doPost(e) {
  try {
    // Get secrets from Properties Service
    const properties = PropertiesService.getScriptProperties();
    const SECRET_TOKEN = properties.getProperty('SECRET_TOKEN');
    const SHEET_ID = properties.getProperty('SHEET_ID'); // Can also store this here
    
    if (!SECRET_TOKEN || !SHEET_ID) {
      console.error('Missing required properties');
      return ContentService
        .createTextOutput(JSON.stringify({status: 'error', message: 'Configuration error'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Token validation
    const data = JSON.parse(e.postData.contents);
    const receivedToken = data.token;
    
    if (receivedToken !== SECRET_TOKEN) {
      console.log('Invalid token received');
      return ContentService
        .createTextOutput(JSON.stringify({status: 'error', message: 'Unauthorized'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Data validation
    if (!data.user_id || typeof data.user_id !== 'number') {
      return ContentService
        .createTextOutput(JSON.stringify({status: 'error', message: 'Invalid user_id'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Size limits
    const message = (data.message || '').toString().slice(0, 500);
    const username = (data.username || 'Unknown').toString().slice(0, 50);
    const rating = data.rating ? data.rating.toString().slice(0, 1) : '';
    
    // Rating validation
    if (rating && !['1', '2', '3', '4', '5'].includes(rating)) {
      return ContentService
        .createTextOutput(JSON.stringify({status: 'error', message: 'Invalid rating'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Simple spam protection - check recent entries
    const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();
    const lastRow = sheet.getLastRow();
    
    if (lastRow > 1) {
      // Check last 5 entries for duplicates from the same user
      const recentRows = sheet.getRange(Math.max(2, lastRow - 4), 1, Math.min(5, lastRow - 1), 5).getValues();
      const now = new Date();
      const oneMinuteAgo = new Date(now.getTime() - 60 * 1000); // 1 minute
      
      for (let row of recentRows) {
        if (row[2] === data.user_id && row[0] > oneMinuteAgo) {
          return ContentService
            .createTextOutput(JSON.stringify({status: 'error', message: 'Rate limit exceeded'}))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
    }
    
    // Filter suspicious content
    let cleanMessage = message
      .replace(/<[^>]*>/g, '[HTML]') // HTML tags
      .replace(/javascript:/gi, '[JS]') // JavaScript
      .replace(/script/gi, '[SCRIPT]'); // Script tags
    
    // Save data
    sheet.appendRow([
      new Date(),
      username,
      data.user_id,
      cleanMessage,
      rating
    ]);
    
    console.log(`Feedback saved: user ${data.user_id}, rating ${rating}`);
    
    return ContentService
      .createTextOutput(JSON.stringify({status: 'success'}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error in doPost:', error);
    return ContentService
      .createTextOutput(JSON.stringify({status: 'error', message: 'Server error'}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doGet(e) {
  return ContentService
    .createTextOutput('Not found')
    .setMimeType(ContentService.MimeType.TEXT);
}

